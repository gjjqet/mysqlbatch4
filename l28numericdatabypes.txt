=> Numeric Data Types
                              Description
BIT(size)                     A bit-value type , form 1 to 64 , dafault value is 1
BOOL(size)                    Zero is considered as false , None-Zero values are considered as true 
BOOLEAN                       Zero is considered as false , None-Zero values are considered as true

TINYINT(size)                 A very small integer, Singed range -128 to 127 , Unsigned range 0 to 255         
SMALLINT(size)                A small integer , Singed range -3277 to 3276 , Unsigned range 0 to 6555(6kb)                   
MEDIUMINT(size)               A small integer , Singed range -8388608 to 8388607 , Unsigned range 0 to 6555(16mb)               
INT                           A small integer , Singed range -2147483648 to 214748647 , Unsigned range 0 to 6555(4gb)
INTEGER                       A small integer , Singed range -2147483648 to 214748647 , Unsigned range 0 to 6555(4gb)
BITINT()                      A large Integer
 

DECIMAL(size,d)               Fixed-point number , default value for d is 0
                              eg(999.99) is digit and 2 decimal DECIMAL(5,2)

DEC(size,d)                   Fixed-point number , default value for d is 0

FLOAT(size,p)                 A floating point number (Approximate Value)
FLOAT(p)                      A floating point number (Approximate Value), p is optional , p is form 0 to 24
DOUBLE(size,p)                A floating point number (Approximate Value), p is optional , p is form 25 to 53


Note = DECIMAL for finance (such as money)
       FLOAT & DOUBLE for science app

-----------------------------------------------------------------------------------------------------

= EXERCISE

CREATE TABLE IF NOT EXISTS items (
       name VARCHAR(20),
       price INT,
       status BOOL
);


DESC items;
SHOW CREATE TABLE items;

INSERT INTO items (name,price)
VALUES ("water",100),
       ("coffee",500),
       ("cake",800),
       ("snack",250.56),
       ("jam",100.34);

SELECT * FROM items;

INSERT INTO items (name,price,status)
VALUES ("redbull",10,0),
       ("sponsor",500,1),
       ("joey",800,0),
       ("deedo",250.56,1),
       ("cake",100.34,0);

SELECT * FROM items;


CREATE TABLE IF NOT EXISTS proitems (
       name VARCHAR(20),
       purchaseprice INT(4) SIGNED,
       selllprice INT(4) UNSIGNED
);

DESC proitems;
SHOW CREATE TABLE proitems;

INSERT INTO proitems (name,purchaseprice,selllprice)
VALUES ("water",9000,9500),
       ("coffee",-100,200),
       ("cake",800,100),
       ("snack",-250.56,350.77),
       ("jam",-1000,2000);

SELECT * FROM proitems;



#1264 - Out of range value for column 'selllprice' at row 1

INSERT INTO proitems (name,purchaseprice,selllprice)
VALUES ("water",100,-1100);

SELECT * FROM proitems;

-----------------------------------------------------------------------------------------------

                             number data type
                             int      fixed-point       floating-point
                             integer  decimal           float/double


DECIMAL(5,2)
eg1 (999.99) is 5 digit and 2 decimal digit

DECIMAL(5,3) = 20.234
               20.5 = 20.5000
               20.52354897  =  20.524 (warning)


CREATE TABLE IF NOT EXISTS sellitems(
       name VARCHAR(20),
       price DECIMAL(6,2)
);

DESC sellitems;
SHOW CREATE TABLE sellitems;

INSERT INTO sellitems (name,price)
VALUE ("coffee",1000.43);

*result 1000.01
INSERT INTO sellitems (name,price)
VALUE ("coffee",1000.01);

*result 1001.00
INSERT INTO sellitems (name,price)
VALUE ("coffee",1000.9958);

*result 1000.99
INSERT INTO sellitems (name,price)
VALUE ("coffee",1000.9858);

*result 1000.99
INSERT INTO sellitems (name,price)
VALUE ("coffee",1000.99);

SELECT * FROM sellitems;

*result 1000.00
INSERT INTO sellitems (name,price)
VALUE ("coffee",1000);

SELECT * FROM sellitems;

*error       #1264 - Out of range value for column 'price' at row 1
INSERT INTO sellitems (name,price)
VALUE ("coffee",100000);

SELECT * FROM sellitems;


----------------------------------------------------------------------------------------


=> FLOAT() vs DOUBLE()

CREATE TABLE IF NOT EXISTS shoppings(
    name VARCHAR(20),
    purchaseprice FLOAT,
    sellprice FLOAT(4)
);

DESC shoppings;
SHOW CREATE TABLE shoppings;

INSERT INTO shoppings(name,purchaseprice,sellprice)
VALUES ("redbull",100,100),
       ("sponsor",500,500.34),
       ("joey",800,800.56),
       ("deedo",250,250.889),
       ("cake",9000,10000);

SELECT * FROM shoppings;

*result = 112233
INSERT INTO shoppings(name,purchaseprice,sellprice)
VALUES ("birdnest",112233,112233.45);

*result = 11223300
INSERT INTO shoppings(name,purchaseprice,sellprice)
VALUES ("water",11223344.45,11223344.45);

*result = 1122330000
INSERT INTO shoppings(name,purchaseprice,sellprice)
VALUES ("water",1122334455.45,1122334455.45);

SELECT * FROM shoppings;

-------------------------------------------------------------------

CREATE TABLE IF NOT EXISTS buyings(
    name VARCHAR(20);
    purchaseprice FLOAT;
    sellprice DOUBLE
);

DESC buyings;
SHOW CREATE TABLE byuings;

INSERT INTO buyings(name,purchaseprice,sellprice)
VALUES ("redbull",100,100),
       ("sponsor",500.34,500.34),
       ("joey",800.56,800.56),
       ("deedo",250.889,250.889),
       ("cake",10000,10000);

SELECT * FROM buyings;

*result = 112233 , 112233.45
INSERT INTO buyings(name,purchaseprice,sellprice)
VALUES ("birdnest",112233.45,112233.45);

*result = 11223300 , 11223344.45
INSERT INTO buyings(name,purchaseprice,sellprice)
VALUES ("water",11223344.45,11223344.45);

*result = 1122330000 , 1122334455.45
INSERT INTO buyings(name,purchaseprice,sellprice)
VALUES ("water",1122334455.45,1122334455.45);

*result = 1.12233e17  ,  1.122334455667789e17
INSERT INTO buyings(name,purchaseprice,sellprice)
VALUES ("water",112233445566778899.45,112233445566778899.45);

SELECT * FROM byuings;

---------------------------------------------------------------------------

=> e/E
HTML input type allow "e/E" buz a stand for exponential (exponent) which is a numeric sybol
Eg . 200000 can be written as 2e5 (3e4 = 3x10^4 = 30000)

shift + 6 = ^ (call Caret or Hat);